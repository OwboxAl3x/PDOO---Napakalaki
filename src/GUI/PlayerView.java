/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JPanel;
import napakalaki.Napakalaki;
import napakalaki.Player;
import napakalaki.Treasure;


public class PlayerView extends javax.swing.JPanel {

    Player playerModel;
    private Napakalaki napakalakiModel;
    private NapakalakiView napakalakiView;
    
    /**
     * Creates new form PlayerView
     */
    public PlayerView() {
        initComponents();
    }
    
    public void setNapakalaki(Napakalaki model, NapakalakiView view) {

        this.napakalakiModel = model;
        this.napakalakiView = view;
                
    }
    
    public void setPlayer(Player p) {

        playerModel = p;

        this.nombre.setText("Nombre: " + playerModel.getName());
        this.level.setText("Nivel: " + Integer.toString(playerModel.getLevels()));
        
        this.combatLevel.setText("Nivel de Combate: " + Integer.toString(playerModel.getCombatLevel()));
        
        this.enemy.setText("Enemigo: " + playerModel.getEnemy().getName());
        
        visiblePending(false);
        
        if(this.playerModel.canISteal()){
            
            this.steal.setEnabled(true);
            
        }
        
        //this.pendingBadConsequenceView1.setPendingBadConsequence(playerModel.getPendingBadConsequence());
        
        this.fillTreasurePanel(visibleTreasures,playerModel.getVisibleTreasures());
        this.fillTreasurePanel(hiddenTreasures,playerModel.getHiddenTreasures());
        
        repaint();
        revalidate();
        
    }
    
    public Player getPlayer(){
        
        return this.playerModel;
        
    }
    
    public void visiblePending(boolean b){
        
        this.pendingBadConsequenceView1.setVisible(b);
        
    }
    
    public GUI.PendingBadConsequenceView getPending(){
        
        return this.pendingBadConsequenceView1;
        
    }
    
    private ArrayList<Treasure> getSelectedTreasures(JPanel aPanel) {
        // Se recorren los tesoros que contiene el panel,
        // almacenando en un vector aquellos que est치n seleccionados.
        // Finalmente se devuelve dicho vector.
        TreasureView tv;
        ArrayList<Treasure> output = new ArrayList();
        
        for (Component c : aPanel.getComponents()) {
            
            tv = (TreasureView) c;
            if ( tv.isSelected() )
                output.add ( tv.getTreasure() );
            
        }
        
        return output;
        
    }
    
    private void fillTreasurePanel (JPanel aPanel, ArrayList<Treasure> aList) {
        
        // Se elimina la informaci칩n antigua, si la hubiera
        aPanel.removeAll();
        
        // Se recorre la lista de tesoros construyendo y a침adiendo sus vistas
        //    al panel
        for (Treasure t : aList) {
            
           TreasureView aTreasureView = new TreasureView();
           aTreasureView.setTreasure(t);
           aTreasureView.setVisible(true);
           aPanel.add(aTreasureView);
           
        }
        
        // Se fuerza la actualizaci칩n visual del panel
        aPanel.repaint();
        aPanel.revalidate();
                
    }
    
    public void setBtVisible(boolean b){
        
        this.visible.setEnabled(b);
        
    }
    
    public void setlbSectario(){
        
        this.sectario.setText("Sectario? Si");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nombre = new javax.swing.JLabel();
        level = new javax.swing.JLabel();
        combatLevel = new javax.swing.JLabel();
        enemy = new javax.swing.JLabel();
        sectario = new javax.swing.JLabel();
        steal = new javax.swing.JButton();
        visible = new javax.swing.JButton();
        discardTreasure = new javax.swing.JButton();
        discardAllTreasures = new javax.swing.JButton();
        pendingBadConsequenceView1 = new GUI.PendingBadConsequenceView();
        hiddenTreasures = new javax.swing.JPanel();
        visibleTreasures = new javax.swing.JPanel();

        nombre.setText("Nombre");

        level.setText("Level");

        combatLevel.setText("CombatLevel");

        enemy.setText("Enemigo");

        sectario.setText("Sectario?");

        steal.setText("Steal");
        steal.setMaximumSize(new java.awt.Dimension(5, 5));
        steal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stealActionPerformed(evt);
            }
        });

        visible.setText("Make Visible");
        visible.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibleActionPerformed(evt);
            }
        });

        discardTreasure.setText("Discard");
        discardTreasure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardTreasureActionPerformed(evt);
            }
        });

        discardAllTreasures.setText("Discard All");
        discardAllTreasures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardAllTreasuresActionPerformed(evt);
            }
        });

        pendingBadConsequenceView1.setBorder(javax.swing.BorderFactory.createTitledBorder("Pending Bad Consequence"));

        hiddenTreasures.setBorder(javax.swing.BorderFactory.createTitledBorder("Hidden"));

        visibleTreasures.setBorder(javax.swing.BorderFactory.createTitledBorder("Visible"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(level)
                                    .addComponent(nombre)
                                    .addComponent(combatLevel)
                                    .addComponent(enemy)
                                    .addComponent(sectario)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(steal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(visible)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(discardTreasure)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(discardAllTreasures))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(visibleTreasures, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                                .addComponent(hiddenTreasures, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(5, 5, 5))
                    .addComponent(pendingBadConsequenceView1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(level)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combatLevel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enemy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sectario)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pendingBadConsequenceView1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(steal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(visible)
                    .addComponent(discardTreasure)
                    .addComponent(discardAllTreasures))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hiddenTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visibleTreasures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void visibleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibleActionPerformed
        // TODO add your handling code here:
        
        ArrayList<Treasure> selHidden = getSelectedTreasures(hiddenTreasures);
        napakalakiModel.makeTreasuresVisible(selHidden);
        setPlayer(napakalakiModel.getCurrentPlayer());
        
        repaint();
        
    }//GEN-LAST:event_visibleActionPerformed

    private void discardTreasureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardTreasureActionPerformed
        // TODO add your handling code here:
        
        ArrayList<Treasure> selVisible = getSelectedTreasures(visibleTreasures);
        
        for(Treasure t:selVisible){
            
            this.playerModel.discardVisibleTreasure(t);
            
        }
        
        if (playerModel.validState()){
            
            this.napakalakiView.setBtNextTurn();
            
        }
        
        setPlayer(napakalakiModel.getCurrentPlayer());
        repaint();
        
        
        
    }//GEN-LAST:event_discardTreasureActionPerformed

    private void discardAllTreasuresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardAllTreasuresActionPerformed
        // TODO add your handling code here:
        
        this.playerModel.discardAllTreasures();
        
        setPlayer(napakalakiModel.getCurrentPlayer());
        repaint();
        
    }//GEN-LAST:event_discardAllTreasuresActionPerformed

    private void stealActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stealActionPerformed
        // TODO add your handling code here:
        
        this.playerModel.stealTreasure();
        
        setPlayer(napakalakiModel.getCurrentPlayer());
        
        if(!this.playerModel.canISteal())
            this.steal.setEnabled(false);
        
        repaint();
        
    }//GEN-LAST:event_stealActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel combatLevel;
    private javax.swing.JButton discardAllTreasures;
    private javax.swing.JButton discardTreasure;
    private javax.swing.JLabel enemy;
    private javax.swing.JPanel hiddenTreasures;
    private javax.swing.JLabel level;
    private javax.swing.JLabel nombre;
    private GUI.PendingBadConsequenceView pendingBadConsequenceView1;
    private javax.swing.JLabel sectario;
    private javax.swing.JButton steal;
    private javax.swing.JButton visible;
    private javax.swing.JPanel visibleTreasures;
    // End of variables declaration//GEN-END:variables
}
